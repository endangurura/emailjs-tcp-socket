"use strict";

var _windowsSocket = _interopRequireDefault(require("./windows-socket"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* eslint-disable no-unused-expressions */
describe('TCPSocket Windows Stream Socket unit tests', function () {
  var socket;
  before(function () {
    global.Windows = {
      Networking: {
        HostName: function HostName(hostname) {
          this.type = hostname;
          this.hostname = hostname;
        },
        Sockets: {
          StreamSocket: function StreamSocket() {
            var _this = this;

            this.control = {};
            this.inputStream = {
              type: 'inputStream'
            };
            this.outputStream = {
              type: 'outputStream'
            };

            this.connectAsync = function (host, port, protection) {
              _this.host = host;
              _this.port = port;
              _this.protection = protection;
              return {
                done: function done(successCb) {
                  return setImmediate(successCb);
                }
              };
            };
          },
          SocketProtectionLevel: {
            plainSocket: 1,
            tls12: 2
          }
        }
      },
      Storage: {
        Streams: {
          DataReader: function DataReader(stream) {
            var _this2 = this;

            this.type = 'DataReader';
            this.stream = stream;
            this.inputStreamOptions = false;
            this._bytes = false;

            this.loadAsync = function () {
              return {
                done: function done(successCb) {
                  return setImmediate(function () {
                    return successCb(_this2._bytes && _this2._bytes.length || 0);
                  });
                }
              };
            };

            this.readBytes = function (target) {
              for (var i = 0, len = _this2._bytes.length; i < len; i++) {
                target[i] = _this2._bytes[i];
              }

              _this2._bytes = false;
            };
          },
          DataWriter: function DataWriter(stream) {
            var _this3 = this;

            this.type = 'DataWriter';
            this.stream = stream;
            this.inputStreamOptions = false;
            this._bytes = false;

            this.writeBytes = function (data) {
              _this3._bytes = data;
            };

            this.storeAsync = function () {
              return {
                done: function done(successCb) {
                  return setImmediate(successCb);
                }
              };
            };
          },
          InputStreamOptions: {
            partial: 3
          }
        }
      }
    };
  });
  beforeEach(function (done) {
    socket = _windowsSocket["default"].open('127.0.0.1', 9000, {
      useSecureTransport: false
    });
    expect(socket).to.exist;

    socket.onopen = function () {
      done();
    };
  });
  describe('open and read', function () {
    it('should read data from socket', function (done) {
      socket.ondata = function (e) {
        expect(new Uint8Array(e.data)).to.deep.equal(new Uint8Array([0, 1, 2]));
        socket.close();
      };

      socket.onclose = function () {
        return done();
      };

      socket._dataReader._bytes = new Uint8Array([0, 1, 2]);
    });
  });
  describe('close', function () {
    it('should work', function (done) {
      socket.onclose = function () {
        expect(socket.readyState).to.equal('closed');
        done();
      };

      socket.close();
    });
  });
  describe('send', function () {
    it('should send data to socket', function (done) {
      socket.ondrain = function () {
        socket.close();
      };

      socket.onclose = function () {
        return done();
      };

      socket.send(new Uint8Array([0, 1, 2]).buffer);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,